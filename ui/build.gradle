apply plugin: 'antlr'

description = 'ui'

sourceSets{
    main{
        java{
            exclude "edu.kit.iti.formal.psdbg.controller"
            exclude "edu.kit.iti.formal.psdbg.controls"
            exclude "edu.kit.iti.formal.psdbg.graphs"
        }
    }
}

generateGrammarSource {
    arguments += ["-long-messages", "-package","antlrgrammars"]
}

dependencies {
    compile group: 'org.antlr', name: 'antlr4', version: '4.7'
    compile group: 'com.fifesoft', name: 'rsyntaxtextarea', version: '2.6.1'
    compile group: 'com.fifesoft', name: 'autocomplete', version: '2.6.1'
    compile group: 'com.fifesoft', name: 'rstaui', version: '2.6.1'

    antlr group: 'org.antlr', name: 'antlr4', version: '4.7'

    compile project(':rt-key')
    compile project(':lint')
    compile 'com.github.jiconfont:jiconfont-swing:1.0.0'

    compile files('libs/docking-frames-common.jar', 
            'libs/docking-frames-core.jar',
            'libs/docking-frames-ext-toolbar.jar',
            'libs/docking-frames-ext-toolbar-common.jar')
}

def mainClassName = 'edu.kit.iti.formal.psdbg.gui.ProofScriptDebugger'

task runApp(type: JavaExec) {
    jvmArgs << '-Dsun.awt.disablegrab=true' << '-Dglass.disableGrab=true'
    /*applicationDefaultJvmArgs = [
            // For accessing VirtualFlow field from the base class in GridViewSkin
            "--add-opens=javafx.controls/javafx.scene.control.skin=ALL-UNNAMED",
            // For accessing InputMap used in RangeSliderBehavior
            "--add-exports=javafx.controls/com.sun.javafx.scene.control.inputmap=ALL-UNNAMED"
    ]*/
    classpath = sourceSets.main.runtimeClasspath
    main = mainClassName
}


task distJar(type: Jar) {

    manifest {
        attributes 'Main-Class': mainClassName
    }
    classifier="exe"
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}
distJar.dependsOn jar

task customFatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'edu.kit.iti.formal.psdbg.gui.ProofScriptDebugger'
    }
    baseName = 'all-in-one-jar'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}
customFatJar.dependsOn jar